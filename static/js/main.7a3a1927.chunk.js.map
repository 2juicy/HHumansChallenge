{"version":3,"sources":["components/Header/Header.js","components/Sidebar/Sidebar.js","components/Card/Card.js","components/List/List.js","components/Pagination/Pagination.js","components/Detail/Detail.js","index.js","App.js"],"names":["Header","searchColor","invalid","filterInput","useState","value","setValue","id","className","href","alt","src","process","onChange","e","target","onKeyDown","keyCode","trim","onKeyUp","label","placeholder","Sidebar","random","onClick","Card","color","viewDetails","name","colorId","style","backgroundColor","hexString","List","colors","loading","textAlign","console","log","length","map","key","Pagination","currentPage","totalColors","colorsPerPage","paginate","pages","i","Math","ceil","push","Fragment","num","Detail","detail","clear","ReactDOM","render","setColors","filteredColors","setFilter","setLoading","showDetail","setShowDetail","details","setDetails","detailColors","setDetailColors","setInvalid","setCurrentPage","useEffect","a","fetch","res","ok","Error","json","catch","err","error","indexOfLast","indexOfFirst","slice","currentColors","setCurrentColors","input","index","findIndex","x","toLowerCase","replace","setTimeout","newColors","indexOf","randomize","floor","page","document","getElementById"],"mappings":"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","file":"static/js/main.7a3a1927.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./Header.css\";\n\nexport default function Header({ searchColor, invalid, filterInput }) {\n  const [value, setValue] = useState(\"\");\n\n  const keyPress = e => {\n    if (e.keyCode === 13) {\n      searchColor(e.target.value.trim());\n      setValue(\"\");\n    }\n  };\n\n  return (\n    <header id=\"header-component\">\n      <div className=\"logo\">\n        <a href=\"/\">\n          <img\n            alt=\"Helpful Humans\"\n            src={process.env.PUBLIC_URL + \"/assets/logo.svg\"}\n          />\n        </a>\n      </div>\n      <input\n        value={value}\n        onChange={e => setValue(e.target.value)}\n        onKeyDown={keyPress}\n        onKeyUp={e => filterInput(e.target.value.trim())}\n        className={(invalid ? \"blink \" : \"\") + \"search\"}\n        label=\"Search\"\n        placeholder=\"Search/Filter\"\n      />\n    </header>\n  );\n}\n","import React from \"react\";\r\nimport \"./Sidebar.css\";\r\n\r\nexport default function Sidebar({ random, searchColor }) {\r\n  return (\r\n    <section className=\"sidebar\">\r\n      <div id=\"sidebar-logo\">\r\n        <a href=\"#0\">\r\n          <img\r\n            alt=\"Helpful Humans\"\r\n            src={process.env.PUBLIC_URL + \"/assets/blacklogo.png\"}\r\n          />\r\n        </a>\r\n      </div>\r\n      <div className=\"random-button\">\r\n        <button onClick={random} className=\"random\">\r\n          Random Color\r\n        </button>\r\n      </div>\r\n      <div className=\"flex\">\r\n        <a onClick={() => searchColor(\"Red\")} href=\"#0\" className=\"colors\">\r\n          Red\r\n        </a>\r\n        <a onClick={() => searchColor(\"Orange\")} href=\"#0\" className=\"colors\">\r\n          Orange\r\n        </a>\r\n        <a onClick={() => searchColor(\"Yellow\")} href=\"#0\" className=\"colors\">\r\n          Yellow\r\n        </a>\r\n        <a onClick={() => searchColor(\"Green\")} href=\"#0\" className=\"colors\">\r\n          Green\r\n        </a>\r\n        <a onClick={() => searchColor(\"Blue\")} href=\"#0\" className=\"colors\">\r\n          Blue\r\n        </a>\r\n        <a onClick={() => searchColor(\"Purple\")} href=\"#0\" className=\"colors\">\r\n          Purple\r\n        </a>\r\n        <a onClick={() => searchColor(\"Brown\")} href=\"#0\" className=\"colors\">\r\n          Brown\r\n        </a>\r\n        <a onClick={() => searchColor(\"Gray\")} href=\"#0\" className=\"colors\">\r\n          Gray\r\n        </a>\r\n      </div>\r\n    </section>\r\n  );\r\n}\r\n","import React from \"react\";\nimport \"./Card.css\";\n\nexport default function Card({ color, viewDetails }) {\n  return (\n    <div className=\"card\">\n      <span className=\"tooltiptext\">{color.name}</span>\n      <div\n        onClick={() => viewDetails(color.colorId)}\n        className=\"card-color\"\n        style={{ backgroundColor: color.hexString }}\n      ></div>\n      <div className=\"card-text\">\n        <p>{color.hexString}</p>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport Card from \"../Card/Card\";\nimport \"./List.css\";\n\nexport default function List({ colors, loading, viewDetails }) {\n  if (loading) {\n    return <h1 style={{ textAlign: \"center\" }}>Loading...</h1>;\n  }\n  console.log(colors);\n  return (\n    <section id=\"list-section\">\n      {colors.length ? (\n        colors.map(color => (\n          <Card key={color.colorId} color={color} viewDetails={viewDetails} />\n        ))\n      ) : (\n        <h1 style={{ textAlign: \"center\" }}>No results...</h1>\n      )}\n    </section>\n  );\n}\n","import React from \"react\";\nimport \"./Pagination.css\";\n\nexport default function Pagination({\n  currentPage,\n  totalColors,\n  colorsPerPage,\n  paginate\n}) {\n  const pages = [];\n  for (let i = 1; i <= Math.ceil(totalColors / colorsPerPage); i++) {\n    pages.push(i);\n  }\n\n  return (\n    <div className=\"pages\">\n      {pages.length > 1 ? (\n        <React.Fragment>\n          <a onClick={() => paginate(-1)} href=\"#0\" className=\"page-link\">\n            &laquo;\n          </a>\n\n          {pages.map(num => (\n            <a\n              key={num}\n              onClick={() => paginate(num)}\n              href=\"#0\"\n              className={(currentPage === num ? \"active \" : \"\") + \"page-link\"}\n            >\n              {num}\n            </a>\n          ))}\n\n          <a onClick={() => paginate(0)} href=\"#0\" className=\"page-link\">\n            &raquo;\n          </a>\n        </React.Fragment>\n      ) : null}\n    </div>\n  );\n}\n","import React from \"react\";\nimport \"./Detail.css\";\nimport Card from \"../Card/Card\";\n\nexport default function Detail({ detail, colors, viewDetails, clear }) {\n  return (\n    <div id=\"detail\">\n      <Card color={detail} viewDetails={viewDetails} />\n      <div className=\"flex-detail\">\n        {colors.map(color => (\n          <Card key={color.colorId} color={color} viewDetails={viewDetails} />\n        ))}\n      </div>\n      <div className=\"clear-button\">\n        <button onClick={clear}>Clear</button>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n","import React, { useState, useEffect } from \"react\";\nimport Header from \"./components/Header/Header\";\nimport Sidebar from \"./components/Sidebar/Sidebar\";\nimport List from \"./components/List/List\";\nimport Pagination from \"./components/Pagination/Pagination\";\nimport Detail from \"./components/Detail/Detail\";\n// Without a backend we can import the colors directly\n// import colors from \"./colors.json\";\n\nexport default function App() {\n  const [colors, setColors] = useState([]);\n  const [filteredColors, setFilter] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [showDetail, setShowDetail] = useState(false);\n  const [details, setDetails] = useState();\n  const [detailColors, setDetailColors] = useState([]);\n  const [invalid, setInvalid] = useState(false);\n  let [currentPage, setCurrentPage] = useState(1);\n  const colorsPerPage = 12;\n\n  // For now we fetch locally for colors, when an API endpoint is created we can fetch from server.\n  useEffect(() => {\n    (async function() {\n      setLoading(true);\n      let res = await fetch(\"colors.json\");\n      if (!res.ok) throw new Error(\"Failed to fetch\");\n      let json = await res.json();\n      setColors(json);\n      setFilter(json);\n      setLoading(false);\n    })().catch(err => console.error(err));\n  }, []);\n\n  const indexOfLast = currentPage * colorsPerPage;\n  const indexOfFirst = indexOfLast - colorsPerPage;\n  const [currentColors, setCurrentColors] = useState(\n    filteredColors.slice(indexOfFirst, indexOfLast)\n  );\n\n  useEffect(() => {\n    setCurrentColors(filteredColors.slice(indexOfFirst, indexOfLast));\n  }, [filteredColors, indexOfFirst, indexOfLast]);\n\n  // Functions for event handling\n  const paginate = page => {\n    if (page > 0) {\n      setCurrentPage(page);\n    } else if (\n      page === 0 &&\n      currentPage < Math.ceil(filteredColors.length / colorsPerPage)\n    ) {\n      setCurrentPage(++currentPage);\n    } else if (page === -1 && currentPage > 1) {\n      setCurrentPage(--currentPage);\n    }\n  };\n\n  const randomColor = () => {\n    setShowDetail(true);\n    const randomize = Math.floor(Math.random() * colors.length);\n    setDetails(colors[randomize]);\n    setDetailColors(colors.slice(randomize + 1, randomize + 6));\n  };\n\n  const viewDetails = colorId => {\n    setShowDetail(true);\n    setDetails(colors[colorId]);\n    if (colorId + 6 > colors.length) {\n      setDetailColors(colors.slice(colorId - 6, colorId - 1));\n    } else {\n      setDetailColors(colors.slice(colorId + 1, colorId + 6));\n    }\n  };\n\n  const searchColor = input => {\n    const index = colors.findIndex(\n      x =>\n        x.name.toLowerCase().replace(/\\s/g, \"\") ===\n        input.toLowerCase().replace(/\\s/g, \"\")\n    );\n    if (index > -1) {\n      viewDetails(index);\n    } else {\n      if (!invalid) {\n        setInvalid(true);\n        setTimeout(() => {\n          setInvalid(false);\n        }, 3000);\n      }\n    }\n  };\n\n  const filterInput = input => {\n    setCurrentPage(1);\n    let newColors = [];\n    for (let i = 0; i < colors.length; i++) {\n      if (colors[i].name.toLowerCase().indexOf(input.toLowerCase()) > -1) {\n        newColors.push(colors[i]);\n      }\n    }\n    setFilter(newColors);\n  };\n\n  return (\n    <div>\n      <Header\n        filterInput={filterInput}\n        searchColor={searchColor}\n        invalid={invalid}\n      />\n      <Sidebar random={randomColor} searchColor={searchColor} />\n      {!showDetail ? (\n        <React.Fragment>\n          <List\n            colors={currentColors}\n            loading={loading}\n            viewDetails={viewDetails}\n          />\n          <Pagination\n            currentPage={currentPage}\n            colorsPerPage={colorsPerPage}\n            totalColors={filteredColors.length}\n            paginate={paginate}\n          />\n        </React.Fragment>\n      ) : (\n        <Detail\n          detail={details}\n          colors={detailColors}\n          viewDetails={viewDetails}\n          clear={() => setShowDetail(false)}\n        />\n      )}\n    </div>\n  );\n}\n"],"sourceRoot":""}