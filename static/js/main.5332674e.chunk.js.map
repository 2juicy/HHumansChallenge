{"version":3,"sources":["components/Header/Header.js","components/Sidebar/Sidebar.js","components/Card/Card.js","components/List/List.js","components/Pagination/Pagination.js","components/Detail/Detail.js","index.js","App.js"],"names":["Header","id","className","href","alt","src","process","label","placeholder","Sidebar","random","onClick","Card","color","viewDetails","colorId","style","backgroundColor","hexString","List","colors","loading","textAlign","map","key","Pagination","totalColors","colorsPerPage","paginate","pages","i","Math","ceil","push","num","Detail","detail","clear","details","ReactDOM","render","useState","setColors","setLoading","showDetail","setShowDetail","setDetails","detailColors","setDetailColors","currentPage","setCurrentPage","useEffect","a","fetch","res","ok","Error","json","catch","err","console","error","indexOfLast","indexOfFirst","currentColors","slice","randomize","floor","length","Fragment","page","document","getElementById"],"mappings":"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","file":"static/js/main.5332674e.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Header.css\";\n\nexport default function Header() {\n  return (\n    <header id=\"header-component\">\n      <div className=\"logo\">\n        <a href=\"#0\">\n          <img\n            alt=\"Helpful Humans\"\n            src={process.env.PUBLIC_URL + \"/assets/logo.svg\"}\n          />\n        </a>\n      </div>\n      <input className=\"search\" label=\"Search\" placeholder=\"Search\" />\n    </header>\n  );\n}\n","import React from \"react\";\r\nimport \"./Sidebar.css\";\r\n\r\nexport default function Sidebar({ random }) {\r\n  return (\r\n    <section className=\"sidebar\">\r\n      <div id=\"sidebar-logo\">\r\n        <a href=\"#0\">\r\n          <img\r\n            alt=\"Helpful Humans\"\r\n            src={process.env.PUBLIC_URL + \"/assets/blacklogo.png\"}\r\n          />\r\n        </a>\r\n      </div>\r\n      <div className=\"random-button\">\r\n        <button onClick={random} className=\"random\">\r\n          Random Color\r\n        </button>\r\n      </div>\r\n      <div className=\"flex\">\r\n        <a href=\"#0\" className=\"colors\">\r\n          Red\r\n        </a>\r\n        <a href=\"#0\" className=\"colors\">\r\n          Orange\r\n        </a>\r\n        <a href=\"#0\" className=\"colors\">\r\n          Yellow\r\n        </a>\r\n        <a href=\"#0\" className=\"colors\">\r\n          Green\r\n        </a>\r\n        <a href=\"#0\" className=\"colors\">\r\n          Blue\r\n        </a>\r\n        <a href=\"#0\" className=\"colors\">\r\n          Purple\r\n        </a>\r\n        <a href=\"#0\" className=\"colors\">\r\n          Brown\r\n        </a>\r\n        <a href=\"#0\" className=\"colors\">\r\n          Gray\r\n        </a>\r\n      </div>\r\n    </section>\r\n  );\r\n}\r\n","import React from \"react\";\nimport \"./Card.css\";\n\nexport default function Card({ color, viewDetails }) {\n  return (\n    <div className=\"card\">\n      <div\n        onClick={() => viewDetails(color.colorId)}\n        className=\"card-color\"\n        style={{ backgroundColor: color.hexString }}\n      ></div>\n      <div className=\"card-text\">\n        <p>{color.hexString}</p>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport Card from \"../Card/Card\";\n\nimport \"./List.css\";\n\nexport default function List({ colors, loading, viewDetails }) {\n  if (loading) {\n    return <h1 style={{ textAlign: \"center\" }}>Loading...</h1>;\n  }\n\n  return (\n    <section id=\"list-section\">\n      {colors.map(color => (\n        <Card key={color.colorId} color={color} viewDetails={viewDetails} />\n      ))}\n    </section>\n  );\n}\n","import React from \"react\";\r\nimport \"./Pagination.css\";\r\n\r\nexport default function Pagination({ totalColors, colorsPerPage, paginate }) {\r\n  const pages = [];\r\n  for (let i = 1; i <= Math.ceil(totalColors / colorsPerPage); i++) {\r\n    pages.push(i);\r\n  }\r\n\r\n  return (\r\n    <div className=\"pages\">\r\n      <a onClick={() => paginate(-1)} href=\"#0\" className=\"page-link\">\r\n        &laquo;\r\n      </a>\r\n\r\n      {pages.map(num => (\r\n        <a\r\n          key={num}\r\n          onClick={() => paginate(num)}\r\n          href=\"#0\"\r\n          className=\"page-link\"\r\n        >\r\n          {num}\r\n        </a>\r\n      ))}\r\n\r\n      <a onClick={() => paginate(0)} href=\"#0\" className=\"page-link\">\r\n        &raquo;\r\n      </a>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\nimport \"./Detail.css\";\nimport Card from \"../Card/Card\";\n\nexport default function Detail({ detail, colors, viewDetails, clear }) {\n  return (\n    <div id=\"detail\">\n      <Card color={detail} details={viewDetails} />\n      <div className=\"flex-detail\">\n        {colors.map(color => (\n          <Card key={color.colorId} color={color} viewDetails={viewDetails} />\n        ))}\n      </div>\n      <div className=\"clear-button\">\n        <button onClick={clear}>Clear</button>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n","import React, { useState, useEffect } from \"react\";\nimport Header from \"./components/Header/Header\";\nimport Sidebar from \"./components/Sidebar/Sidebar\";\nimport List from \"./components/List/List\";\nimport Pagination from \"./components/Pagination/Pagination\";\nimport Detail from \"./components/Detail/Detail\";\n// Without a backend we can import the colors directly\n// import colors from \"./colors.json\";\n\nexport default function App() {\n  const [colors, setColors] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [showDetail, setShowDetail] = useState(false);\n  const [details, setDetails] = useState();\n  const [detailColors, setDetailColors] = useState([]);\n  let [currentPage, setCurrentPage] = useState(1);\n  const colorsPerPage = 12;\n\n  // For now we fetch locally for colors, when an API endpoint is created we can fetch from server.\n  useEffect(() => {\n    (async function() {\n      setLoading(true);\n      let res = await fetch(\"colors.json\");\n      if (!res.ok) throw new Error(\"Failed to fetch\");\n      let json = await res.json();\n      setColors(json);\n      setLoading(false);\n    })().catch(err => console.error(err));\n  }, []);\n\n  const indexOfLast = currentPage * colorsPerPage;\n  const indexOfFirst = indexOfLast - colorsPerPage;\n  const currentColors = colors.slice(indexOfFirst, indexOfLast);\n\n  // Functions for event handling\n  const paginate = page => {\n    if (page > 0) {\n      setCurrentPage(page);\n    } else if (\n      page === 0 &&\n      currentPage < Math.ceil(colors.length / colorsPerPage)\n    ) {\n      setCurrentPage(++currentPage);\n    } else if (page === -1 && currentPage > 1) {\n      setCurrentPage(--currentPage);\n    }\n  };\n\n  const randomColor = () => {\n    setShowDetail(true);\n    const randomize = Math.floor(Math.random() * colors.length);\n    setDetails(colors[randomize]);\n    setDetailColors(colors.slice(randomize + 1, randomize + 6));\n  };\n\n  const viewDetails = colorId => {\n    setShowDetail(true);\n    setDetails(colors[colorId]);\n    setDetailColors(colors.slice(colorId + 1, colorId + 6));\n  };\n  const clearDetail = () => {\n    setShowDetail(false);\n  };\n\n  return (\n    <div>\n      <Header />\n      <Sidebar random={randomColor} />\n      {!showDetail ? (\n        <React.Fragment>\n          <List\n            colors={currentColors}\n            loading={loading}\n            viewDetails={viewDetails}\n          />\n          <Pagination\n            colorsPerPage={colorsPerPage}\n            totalColors={colors.length}\n            paginate={paginate}\n          />\n        </React.Fragment>\n      ) : (\n        <Detail\n          detail={details}\n          colors={detailColors}\n          viewDetails={viewDetails}\n          clear={clearDetail}\n        />\n      )}\n    </div>\n  );\n}\n"],"sourceRoot":""}